!===================================================================
!         Finds the parcels nearest every "small" parcel
!         Doing the loop over all parcels, rather than small parcels
!         Initialise data first using ranpar.f90
!===================================================================

program nearest

 !Import parameters and constants:
use constants

implicit none

 !Total number of parcels:
integer:: n

 !Parcel positions (x,z) and area fractions:
double precision:: x(nm),z(nm),v(nm)

 !Used for searching for possible parcel merger:
integer:: nppc(ncell),kc1(ncell),kc2(ncell) !ncell = nx*nz
logical:: any_parcels_to_merge(ncell)
integer:: loc(nm/8),node(nm/8),isma(nm/8),ibig(nm/8),nmerge
logical:: merge(nm)
double precision:: dsqmin(nm/8), x_mergers(nm/8), z_mergers(nm/8)

 !Other variables:
double precision:: vmin,vmax,delx,delz,dsq
integer:: i,ic,i0,imin,k,m
integer:: ix,iz,ix0,iz0

!---------------------------------------------------------------------
! Read parcel positions and volume fractions (of grid cell volume):
open(80,file='ini_parcels.asc',status='old')
read(80,*) n
do i=1,n
  read(80,*) x(i),z(i),v(i)
enddo
close(80)

!---------------------------------------------------------------------
! Ask for merger criterion:
vmin=minval(v(1:n))
vmax=maxval(v(1:n))
write(*,*)
write(*,'(a,f9.7)') ' Minimum area fraction of any parcel = ',vmin
write(*,'(a,f9.7)') ' Maximum area fraction of any parcel = ',vmax

write(*,*)
write(*,*) ' Area fraction below which a parcel should be merged?'
read(*,*) vmin

!POMP$ INST BEGIN(foo)
! These parcels are marked for merger:
merge(1:n)=(v(1:n) < vmin)
nmerge=0
dsqmin=ellx*ellx+ellz*ellz

! Form list of small parcels:
do i=1,n
  if (merge(i)) then
    nmerge=nmerge+1
    isma(nmerge)=i
  endif
enddo

!---------------------------------------------------------------------
! Initialise search:
nppc=0 !nppc(ic) will contain the number of parcels in grid cell ic
any_parcels_to_merge=.false.

! Bin small parcels in cells:
do m=1,nmerge
  i0=isma(m)
  ix=mod(nint(dxi*(x(i0)-xmin)),nx) ! ranges from 0 to nx-1
  iz=nint(dzi*(z(i0)-zmin))         ! ranges from 0 to nz
  x_mergers(m)=x(i0)
  z_mergers(m)=z(i0)

  ! Cell index of parcel:
  ic=1+ix+nx*iz !This runs from 1 to ncell

  ! Accumulate number of parcels in this grid cell:
  any_parcels_to_merge(ic)=.true.
  nppc(ic)=nppc(ic)+1

  ! Store grid cell that this parcel is in:
  loc(m)=ic
enddo

! Find arrays kc1(ic) & kc2(ic) which indicate the parcels in grid cell ic
! through i = node(k), for k = kc1(ic),kc2(ic):
kc1(1)=1
do ic=1,ncell-1
  kc1(ic+1)=kc1(ic)+nppc(ic)
enddo

kc2=kc1-1
do m=1,nmerge
  ic=loc(m)
  k=kc2(ic)+1
  node(k)=m
  kc2(ic)=k
enddo

!---------------------------------------------------------------------
! Now find the nearest grid point to each small parcel (to be merged)
! and search over the surrounding 8 grid cells for the closest parcel:
do i=1,n
  if (.not. merge(i)) then
    ix0=int(dxi*(x(i)-xmin))
    iz0=int(dzi*(z(i)-zmin))
    ! Grid point (ix0,iz0) is closest to parcel i

    ! Loop over 8 cells surrounding (ix0,iz0):
    do iz=max(0,iz0),min(nz,iz0+1) !=> iz=0 for iz0=0 & iz=nz-1 for iz0=nz
      do ix=ix0,ix0+1
        ! Cell index (accounting for x periodicity):
        ic=1+mod(nx+ix,nx)+nx*iz
        if(any_parcels_to_merge(ic)) then
          ! Search parcels for closest:
          do k=kc1(ic),kc2(ic)
             m=node(k)
             ! Avoid merger with another small parcel
             delx=x(i)-x_mergers(m)
             delx=delx-ellx*dble(int(delx*hlxi)) ! works across periodic edge
             delz=z(i)-z_mergers(m)
             dsq=delx*delx+delz*delz
             if (dsq < dsqmin(m)) then
               dsqmin(m)=dsq
               ibig(m)=i
             endif
          enddo
        end if
        ! Store the index of the parcel to be merged with:
      enddo
    enddo
  endif
enddo
!POMP$ INST END(foo)

!---------------------------------------------------------------------
! Output data:
open(31,file='domain.asc',status='replace')
write(31,*) nx,nz
write(31,*) ellx,ellz
close(31)

open(31,file='merge.asc',status='replace')
do m=1,nmerge
  write(31,*) isma(m),ibig(m),x(isma(m)),z(isma(m)),x(ibig(m)),z(ibig(m))
enddo
close(31)

write(*,*)
write(*,*) ' A list of the small & large parcels to be merged is in merge.asc'
write(*,*)

 !End main program
end program nearest
